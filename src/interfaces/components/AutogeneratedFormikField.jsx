import React, { useEffect, useContext } from "react";
import { Formik, useFormikContext, useField } from "formik";
import AppContext from "../../context/AppContext";
import axios from "axios";
import getApiData from "../../api/getApiData";

const AutogeneratedFormikField = (props) => {
    const { setError, existUserByUsernameUrl, } = useContext(AppContext);

    //declarando variables gracias al contexto de formik
    const {
        values: { name, lastNameFather, lastNameMother },
        touched,
        setFieldValue,
    } = useFormikContext();
    const [field, meta] = useField(props);

    //generando el nombre de usuario con el formato 
    //Primera letra del ombre + apellido paterno
    const generateUserName = (name, lastNameFather) => {
        const firstLetter = name
            .split(' ')
            .map(word => word[0])
            .join('');
        const username = firstLetter + lastNameFather
        return username.toLowerCase();
    }

    function randomNumber (min, max) {
        return Math.floor(Math.random() * (max - min + 1) + min)
    }

    //función recursiva para ver si el nombre ya está ocupado en la base de datos
    //Si está ocupado le asinga un número random de dos dígitos y consulta de nuevo
    //TODO agregar función para generar número random
    async function generateAvailableUsername(username) {
        const isUsernameFree =await validateUsername(username) ;
        if (isUsernameFree == null) {

        } else if (isUsernameFree) {
            return username;
        } else {
            //generar un número random de dos dígitos
            const random = randomNumber(1,99);
            return generateAvailableUsername(username + random);
        }
    }

    //Consulta a la base de datos
    async function validateUsername(username) {
        const existUser = existUserByUsernameUrl( username);
        const data = await getApiData(existUser, setError);
        if (data?.message === "Existe") {
            console.log("el usuario existe");
            return false;
        } else if (data?.message === "No existe") {
            return true;
        }
        else {
            return null;
        }
    }


    useEffect(() => {
        //set the value of username
        if (
            name.trim() !== '' &&
            lastNameFather.trim() !== '' &&
            lastNameMother.trim() !== '' &&
            touched.name &&
            touched.lastNameFather &&
            touched.lastNameMother
        ) {
            const username = generateUserName(name, lastNameFather);

            if (username != null) {
                (async () => {
                    const availableUsername = await generateAvailableUsername(username);
                    if (availableUsername != null){
                        setFieldValue(props.name, availableUsername);
                    } else {
                        setFieldValue(props.name, "");
                    }
                })();
            }
        }
    }, [
        name,
        lastNameFather,
        lastNameMother,
        touched.name,
        touched.lastNameMother,
        setFieldValue,
        props.name
    ]);


    return (
        <>
            <input {...props} {...field} disabled />
            {!!meta.touched && !!meta.error && <div>{meta.error}</div>}
        </>
    );
};

export default AutogeneratedFormikField;
